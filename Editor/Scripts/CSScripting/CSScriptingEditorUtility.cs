using System.IO;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEditor;
using UnityEditorInternal;
using UnityEditor.Build.Player;
using System.Security.Cryptography;
using System.Text;
using SpatialSys.UnitySDK.Internal;

namespace SpatialSys.UnitySDK.Editor
{
    public static class CSScriptingEditorUtility
    {
        public static readonly string OUTPUT_ASSET_PATH = Path.Combine(EditorUtility.AUTOGENERATED_ASSETS_DIRECTORY, CSScriptingUtility.DEFAULT_CSHARP_ASSEMBLY_NAME + ".dll.txt");

        private const string COMPILE_DESTINATION_DIR = "Temp/CSScriptingCompiledDlls";

        public static void EnforceCustomAssemblyName(AssemblyDefinitionAsset assemblyDefinition, string sku)
        {
            string asmDefAssetPath = AssetDatabase.GetAssetPath(assemblyDefinition);
            string asmDefOriginal = File.ReadAllText(asmDefAssetPath);
            string assemblyName = GetAssemblyNameForSKU(sku);
            string asmDefModified = Regex.Replace(asmDefOriginal, "\"name\":\\s*\".*?\"", $"\"name\": \"{assemblyName}\"");
            File.WriteAllText(asmDefAssetPath, asmDefModified);
            AssetDatabase.ImportAsset(asmDefAssetPath);
        }

        public static bool ValidateCustomAssemblyName(AssemblyDefinitionAsset assemblyDefinition, string sku)
        {
            return GetAssemblyName(assemblyDefinition) == GetAssemblyNameForSKU(sku);
        }

        private static string Sha256Hash(string rawData)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }

        private static string GetAssemblyNameForSKU(string sku)
        {
            switch (sku == null ? "" : Sha256Hash(sku))
            {
                case "71303bc05617d4e9aa08596f62b1aa3ebb74ffc0000d81d2d0e76df15ab2c088":
                    return "Placeholder1";
                case "bab100648c3f568cb4b14f7765ae46cf50e973819fc972e61e25d703c135fd88":
                    return "Placeholder2";
                case "d028dbd5e554c43f2c33d58603af76c6e70b5c3b99fbcdce157e343718047310":
                    return "Placeholder3";
                case "1b6ab678554cbf1db00532dcb14d5965f3cb97e66f2d31ba4ee7c8774940176a":
                    return "Placeholder4";
                case "d8831920b04b56a3dee9f5af1bc1666d98ac350cf91d21bac206ba35b3707e8e":
                    return "Placeholder2";
                case "da2c04554cb7595da4d6a242afcdfa773d684010919e3986d930310023dbe4d0":
                    return "Placeholder1";
                case "4f5de27d999b69eb282bcde9a11def038d17ad17b0bb6f1c0006890c7422ab04":
                    return "Placeholder3";
                case "d39823ecc528ddd94b75bd0dd40147e167c6f400fee9514653e511182b039a8e":
                    return "Placeholder5";
                case "75007390cd6064ade0a043c92984fb1d995c50ec3355de015f8cddb433656ac6":
                    return "Placeholder6";
                case "7344b73a96d76dfdf10a42d57ebdb8f972387ba534f8a71466e713eb8e428c8e":
                    return "Placeholder7";
                case "0b8bce1bbb354b351976de22d4087b49308f67a69f136eb09eae7c249bedbe12":
                    return "Placeholder8";
                case "0c9e2615ed89abfdf6ebb816c4a7c57cb47d17c7d3e25cef27d34dc5f1bbfab6":
                    return "Placeholder9";
                case "1e72de79f122b9000865dcb8006b8d45e5d376d6e81cc0e9e5dcb2fa913ec043":
                    return "Placeholder10";
                case "d4f61d8a88b919c39d03047d04646c2a9cb3670481493c3990aa3f4696874c7b":
                    return "Placeholder11";
                case "4f61b1802045be728aa03c408310367b4f2c08e2115e2d0db98d5cb579a90480":
                    return "Placeholder12";
                case "3e5993788ed39818170ec1f266538e442c88a56ff5c2f29e83983524757a0f2a":
                    return "Placeholder13";
                case "d86e6bad2db89e53c4b81287a2293e591592fdf12c664c59465a7404746551b0":
                    return "Placeholder14";
                case "b0924f570f838fa57704049bb417f69a42aa4fdd6cfad661dd05ebcf15afdc6b":
                    return "Placeholder15";
                case "549693bd88975cab76367a78738f0442c1dd05abbc3a32a17a65d04a8727a34e":
                    return "Placeholder16";
                case "c413deb82d100cf0748b1c0826190b548c0623436c638e36dc8c18cdd99ab2d9":
                    return "Placeholder17";
                case "f62f1a8157206731badafff4fc40f0f573ecbbd07634552d1614c9a9e77790b6":
                    return "Placeholder18";
                case "7609d57a929d2a673e5a8d9b30fd738b7641f896201107e66d783208ff851059":
                    return "Placeholder19";
                case "0c9df2d7b86a9d205e2172590810987cb6ffd476adc396c9c5c89711dad77cd0":
                    return "Placeholder20";
                case "2d64ddf3b62c3b7619579fed3773b0f20b69ccce65748b344c9a85ea35e8dbd2":
                    return "Placeholder21";
                case "f5e8bdd186ff11f148fce4fdd4c4af8ebf87c61afb4cf9128e40af7c973c57d1":
                    return "Placeholder21";
                default:
                    return CSScriptingUtility.DEFAULT_CSHARP_ASSEMBLY_NAME;
            }
        }

        public static bool CompileAssembly(AssemblyDefinitionAsset assemblyDefinition, string sku, bool allowExceptions = false, bool enforceName = true)
        {
            string assemblyName = GetAssemblyName(assemblyDefinition);

            if (enforceName)
            {
                assemblyName = GetAssemblyNameForSKU(sku);
                if (!ValidateCustomAssemblyName(assemblyDefinition, sku))
                {
                    Debug.LogError($"Failed to compile c# assembly: Assembly name must be {assemblyName}; Did you forget to call EnforceCustomAssemblyName");
                    return false;
                }
            }

            // Compile
            try
            {
                BuildTarget buildTarget = EditorUserBuildSettings.activeBuildTarget;
                BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(buildTarget);
                ScriptCompilationSettings scriptCompilationSettings = new() {
                    target = buildTarget,
                    group = buildTargetGroup,
                    options = ScriptCompilationOptions.None,
                };

                string outputDir = Path.Combine(COMPILE_DESTINATION_DIR, buildTarget.ToString());
                if (!Directory.Exists(outputDir))
                    Directory.CreateDirectory(outputDir);

                ScriptCompilationResult compilationResult = PlayerBuildInterface.CompilePlayerScripts(scriptCompilationSettings, outputDir);

                // Copy dll to generated folder
                string dllPath = Path.Combine(outputDir, assemblyName + ".dll");
                if (File.Exists(dllPath) && compilationResult.assemblies.Count > 0)
                {
                    string dllAssetPathOutputDir = Path.GetDirectoryName(OUTPUT_ASSET_PATH);
                    if (!Directory.Exists(dllAssetPathOutputDir))
                        Directory.CreateDirectory(dllAssetPathOutputDir);

                    File.Copy(dllPath, OUTPUT_ASSET_PATH, overwrite: true);
                    AssetDatabase.ImportAsset(OUTPUT_ASSET_PATH);

                    (string[] bannedAPIs, string[] softBannedAPIs) = AssemblyBannedAPIAnalyzer.GetBannedAPIs(File.ReadAllBytes(dllPath), Application.dataPath, allowExceptions);

                    if (softBannedAPIs.Length > 0)
                    {
                        Debug.LogWarning($"Soon to be banned APIs found:\n{string.Join('\n', softBannedAPIs)}");
                    }

                    if (bannedAPIs.Length > 0)
                    {
                        Debug.LogError($"Failed to compile C# assembly; Banned APIs found:\n{string.Join('\n', bannedAPIs)}");
                        return false;
                    }
                    return true;
                }
                else
                {
                    Debug.LogError($"Failed to compile C# assembly; Output dll not found at {dllPath}\n{assemblyDefinition}");
                    return false;
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"Failed to compile c# assembly: {e}\n{assemblyDefinition}");
                return false;
            }
        }

        public static string GetAssemblyName(AssemblyDefinitionAsset assemblyDefinition)
        {
            string txt = File.ReadAllText(AssetDatabase.GetAssetPath(assemblyDefinition));
            Match match = Regex.Match(txt, "\"name\":\\s*\"(.*?)\"");
            if (match.Success)
                return match.Groups[1].Value;

            return null;
        }
    }
}